### Student Activity: Introduction to Cloud Orchestration and Kubernetes

Welcome to this hands-on activity session! In this activity, you'll get practical experience with the concepts of Cloud Orchestration and Kubernetes. Follow the steps below to reinforce your understanding of the topics covered in the session.

---

### **Activity 1: Understanding Cloud Orchestration**

**Objective:** Learn how cloud orchestration automates and coordinates tasks in the cloud.

**Steps:**

1. **Research Cloud Orchestration Tools:**
   - Find three popular cloud orchestration tools (e.g., AWS CloudFormation, Terraform, Ansible).
   - List their key features and use cases.

2. **Create a Simple Automation Script:**
   - Write a basic script using a tool like Ansible to automate the deployment of a web server.
   - Test the script on a local virtual machine or cloud instance.

3. **Explore Cloud Orchestration Use Cases:**
   - Identify three real-world scenarios where cloud orchestration is beneficial (e.g., automated backups, scaling applications, multi-cloud management).
   - Describe how orchestration improves efficiency in each scenario.

---

### **Activity 2: Containers vs. Virtual Machines (VMs)**

**Objective:** Understand the differences between containers and virtual machines.

**Steps:**

1. **Set Up a Virtual Machine:**
   - Use a tool like VirtualBox or VMware to create a virtual machine on your computer.
   - Install a Linux operating system on the VM and explore its features.

2. **Create a Container:**
   - Install Docker on your local machine.
   - Pull a simple Docker image (e.g., nginx) and run it as a container.
   - Compare the startup time and resource usage of the container with the virtual machine.

3. **List Advantages and Disadvantages:**
   - Create a table listing the advantages and disadvantages of using containers versus virtual machines.
   - Consider factors like performance, isolation, and resource efficiency.

---

### **Activity 3: Getting Started with Kubernetes**

**Objective:** Set up a local Kubernetes cluster and deploy a simple application.

**Steps:**

1. **Install Minikube:**
   - Follow the official Minikube installation guide to set up a local Kubernetes cluster on your machine.
   - Start the Minikube cluster and verify that it is running.

2. **Deploy a Sample Application:**
   - Use `kubectl` to deploy a simple application (e.g., a Hello World app) on your Minikube cluster.
   - Create a deployment and expose it as a service.

3. **Scale the Application:**
   - Use `kubectl` to scale the deployment to multiple replicas.
   - Observe how Kubernetes manages the scaling process and distributes the load.

---

### **Activity 4: Exploring Kubernetes Architecture**

**Objective:** Understand the components of Kubernetes and their roles.

**Steps:**

1. **Identify Kubernetes Components:**
   - List the key components of the Kubernetes control plane and worker nodes (e.g., API Server, Scheduler, kubelet).
   - Describe the function of each component.

2. **Visualize the Architecture:**
   - Draw a diagram of the Kubernetes architecture, labeling each component and its interactions.
   - Use online tools like Lucidchart or draw.io for creating the diagram.

3. **Explore Kubernetes Documentation:**
   - Visit the official Kubernetes documentation and read about the architecture and components.
   - Summarize the information in your own words.

---

### **Activity 5: Practicing Basic kubectl Commands**

**Objective:** Gain proficiency in using `kubectl` to interact with a Kubernetes cluster.

**Steps:**

1. **List Cluster Resources:**
   - Use `kubectl get nodes` and `kubectl get pods` to list the nodes and pods in your cluster.
   - Note the status and details of each resource.

2. **Create and Delete Resources:**
   - Write a simple YAML file to define a pod or service.
   - Use `kubectl create -f <file.yaml>` to create the resource and `kubectl delete` to remove it.

3. **Monitor Resource Status:**
   - Use `kubectl describe pod <pod-name>` to view detailed information about a specific pod.
   - Practice using `kubectl logs <pod-name>` to check the logs of a running pod.

---

By completing these activities, you'll gain a deeper understanding of Cloud Orchestration and Kubernetes, and you'll be better equipped to manage containerized applications in the cloud. Happy learning!
